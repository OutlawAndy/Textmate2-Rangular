<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
# show the system color picker and return a hex-format color (#RRGGBB).
# If the input string is a recognizable hex string, the default color will be set to it.
def request_color string
  # string = '#FF0218' unless string.to_s.match(/#?[0-9A-F]{3,6}/i)
  color  = string
  prefix, string = string.match(/(#?)([0-9A-F]{3,6})/i)[1,2]
  string = $1 * 2 + $2 * 2 + $3 * 2 if string =~ /^(.)(.)(.)$/
  def_col = ' default color {' + string.scan(/../).map { |i| i.hex * 257 }.join(",") + '}'
  col = `osascript 2&gt;/dev/null -e 'tell app "TextMate" to choose color#{def_col}'`
  return nil if col == "" # user cancelled -- when it happens, an exception is written to stderr
  col = col.scan(/\d+/).map { |i| "%02X" % (i.to_i / 257) }.join("")

  color = prefix
  if /(.)\1(.)\2(.)\3/.match(col) then
    color &lt;&lt; $1 + $2 + $3
  else
    color &lt;&lt; col
  end
  return color
end
input = STDIN.read
print request_color(input.length &gt; 0 ? input : "#FFF")</string>
	<key>input</key>
	<string>word</string>
	<key>inputFormat</key>
	<string>text</string>
	<key>keyEquivalent</key>
	<string>@3</string>
	<key>name</key>
	<string>color picker</string>
	<key>outputCaret</key>
	<string>selectOutput</string>
	<key>outputFormat</key>
	<string>text</string>
	<key>outputLocation</key>
	<string>replaceInput</string>
	<key>uuid</key>
	<string>15E123CF-3C17-4D4B-ACB6-4FC552C50786</string>
	<key>version</key>
	<integer>2</integer>
</dict>
</plist>
